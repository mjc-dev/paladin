/*
 * Copyright Â© 2025 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package io.kaleido.paladin.toolkit;

import "to_domain.proto";
import "from_domain.proto";
import "to_transport.proto";
import "from_transport.proto";
import "to_registry.proto";
import "from_registry.proto";
import "to_signing_module.proto";
import "from_signing_module.proto";

option java_multiple_files = true;

message Header {
  enum MessageType {
    REGISTER = 0;
    ERROR_RESPONSE = 1;
    REQUEST_TO_PLUGIN = 2;
    RESPONSE_FROM_PLUGIN = 3;
    REQUEST_FROM_PLUGIN= 4;
    RESPONSE_TO_PLUGIN = 5;
  }
  string plugin_id = 1; // unique runtime identifier for this domain
  string message_id = 2; // a unique identifier for this message
  optional string correlation_id = 3; // for replies the identifier of the request (for publications TBD)
  optional string error_message = 4;
  MessageType message_type = 5;
}

message DomainMessage {
  Header header = 1;
  // Request/reply exchanges initiated by the paladin node, to the domain
  oneof request_to_domain {
    ConfigureDomainRequest        configure_domain =             1010;
    InitDomainRequest             init_domain =                  1020;
    InitDeployRequest             init_deploy =                  1030;
    PrepareDeployRequest          prepare_deploy =               1040;
    InitContractRequest           init_contract =                1050;
    InitTransactionRequest        init_transaction =             1060;
    AssembleTransactionRequest    assemble_transaction =         1070;
    EndorseTransactionRequest     endorse_transaction =          1080;
    PrepareTransactionRequest     prepare_transaction =          1090;
    HandleEventBatchRequest       handle_event_batch =           1100;
    InitCallRequest               init_call =                    1110;
    ExecCallRequest               exec_call =                    1120;
    SignRequest                   sign =                         1130;
    GetVerifierRequest            get_verifier =                 1140;
    ValidateStateHashesRequest    validate_state_hashes =        1150;
    BuildReceiptRequest           build_receipt =                1160;
    ConfigurePrivacyGroupRequest  configure_privacy_group =      1170;
    InitPrivacyGroupRequest       init_privacy_group =           1180;
    WrapPrivacyGroupEVMTXRequest  wrap_privacy_group_evmtx =     1190;
  }

  oneof response_from_domain {
    ConfigureDomainResponse       configure_domain_res =         1011;
    InitDomainResponse            init_domain_res =              1021;
    InitDeployResponse            init_deploy_res =              1031;
    PrepareDeployResponse         prepare_deploy_res =           1041;
    InitContractResponse          init_contract_res =            1051;
    InitTransactionResponse       init_transaction_res =         1061;
    AssembleTransactionResponse   assemble_transaction_res =     1071;
    EndorseTransactionResponse    endorse_transaction_res =      1081;
    PrepareTransactionResponse    prepare_transaction_res =      1091;
    HandleEventBatchResponse      handle_event_batch_res =       1101;
    InitCallResponse              init_call_res =                1111;
    ExecCallResponse              exec_call_res =                1121;
    SignResponse                  sign_res =                     1131;
    GetVerifierResponse           get_verifier_res =             1141;
    ValidateStateHashesResponse   validate_state_hashes_res =    1151;
    BuildReceiptResponse          build_receipt_res =            1161;
    ConfigurePrivacyGroupResponse configure_privacy_group_res =  1171;
    InitPrivacyGroupResponse      init_privacy_group_res =       1181;
    WrapPrivacyGroupEVMTXResponse wrap_privacy_group_evmtx_res = 1191;
  }

  // Request/reply exchanges initiated by the domain, to the paladin node
  oneof request_from_domain {
    FindAvailableStatesRequest  find_available_states =     2010;
    EncodeDataRequest           encode_data =               2020;
    DecodeDataRequest           decode_data =               2030;
    RecoverSignerRequest        recover_signer =            2040;
    SendTransactionRequest      send_transaction =          2050;
    LocalNodeNameRequest        local_node_name =           2060;
    GetStatesByIDRequest        get_states_by_id =          2070;
  }

  oneof response_to_domain {
    FindAvailableStatesResponse find_available_states_res = 2011;
    EncodeDataResponse          encode_data_res =           2021;
    DecodeDataResponse          decode_data_res =           2031;
    RecoverSignerResponse       recover_signer_res =        2041;
    SendTransactionResponse     send_transaction_res =      2051;
    LocalNodeNameResponse       local_node_name_res =       2061;
    GetStatesByIDResponse       get_states_by_id_res =      2071;
  }
    
}

message TransportMessage {
  Header header = 1;

  oneof request_to_transport {
    ConfigureTransportRequest configure_transport =         1010;
    SendMessageRequest send_message =                       1020;
    GetLocalDetailsRequest get_local_details =              1030;
    ActivatePeerRequest activate_peer =                     1040;
    DeactivatePeerRequest deactivate_peer =                 1050;
  }

  oneof response_from_transport {
    ConfigureTransportResponse configure_transport_res =    1011;
    SendMessageResponse send_message_res =                  1021;
    GetLocalDetailsResponse get_local_details_res =         1031;
    ActivatePeerResponse activate_peer_res =                1041;
    DeactivatePeerResponse deactivate_peer_res =            1051;
  }

  // Request/reply exchanges initiated by the transport, to the paladin node
  oneof request_from_transport {
    GetTransportDetailsRequest get_transport_details =      2010;
    ReceiveMessageRequest receive_message =                 2020;
  }

  oneof response_to_transport {
    GetTransportDetailsResponse get_transport_details_res = 2011;
    ReceiveMessageResponse receive_message_res =            2021;
  }

}

message RegistryMessage {
  Header header = 1;

  oneof request_to_registry {
    ConfigureRegistryRequest configure_registry =                   1010;
    HandleRegistryEventsRequest handle_registry_events =            1020;
  }

  oneof response_from_registry {
    ConfigureRegistryResponse configure_registry_res =              1011;
    HandleRegistryEventsResponse handle_registry_events_res =       1021;
  }

  // Request/reply exchanges initiated by the transport, to the paladin node
  oneof request_from_registry {
    UpsertRegistryRecordsRequest  upsert_registry_records =         2010;
  }

  oneof response_to_registry {
    UpsertRegistryRecordsResponse upsert_registry_records_res =     2011;
  }
}

message SigningModuleMessage {
  Header header = 1;

  oneof request_to_signing_module {
    ConfigureSigningModuleRequest configure_signing_module =                 1010;
    ResolveKeyRequest resolve_key =                                          1020;
    SignWithKeyRequest sign =                                                1030;
    ListKeysRequest list_keys =                                              1040;
    CloseRequest close =                                                     1050;
    AddInMemorySignerRequest add_in_memory_signer =                          1060;
  }

  oneof response_from_signing_module {
    ConfigureSigningModuleResponse configure_signing_module_res =            1011;
    ResolveKeyResponse resolve_key_res =                                     1021;
    SignWithKeyResponse sign_res =                                           1031;
    ListKeysResponse list_keys_res =                                         1041;
    CloseResponse close_res =                                                1051;
    AddInMemorySignerResponse add_in_memory_signer_res =                     1061;
  }

  // Request/reply exchanges initiated by the signing module, to the paladin node
  oneof request_from_signing_module {
    ReceiveSigningModuleMessageRequest receive_signing_module_message =      2010;
  }

  oneof response_to_signing_module {
    ReceiveSigningModuleMessageResponse receive_signing_module_message_res = 2011;
  }
}

// establishes the long-lived connection
message PluginLoaderInit {
  string id = 1; // UUID that is unique the plugin loader that it shared with the controller out of band to start the channel
}

message PluginInfo {
  enum PluginType {
    DOMAIN = 0;
    TRANSPORT = 1;
    REGISTRY = 2;
    SIGNING_MODULE = 3;
  }
  string id = 1; // UUID that is unique to this runtime instance of the domain
  string name = 2; // The plugin manager ensures only once instance is loaded with this ID
  PluginType plugin_type = 3; // The type of the plugin
}

message PluginLoadFailed {
  PluginInfo plugin = 1; // The information about the plugin
  string error_message = 2; // The error
}

message EmptyResponse {
}

// sent by the plugin controller to the plugin loader over its long lived channel
message PluginLoad {
  enum LibType {
    C_SHARED = 0;
    JAR = 1;
  }
  PluginInfo plugin = 1; // The information about the plugin
  LibType lib_type = 2; // The binary type of the plugin
  string lib_location = 3; // The location of the plugin (such as a Java Jar file or C library load spec)
  optional string class = 4; // For JAR type we need to specify a class inside the Jar as well
  enum SysCommand {
    THREAD_DUMP = 0;
  }
  optional SysCommand sys_command = 5;
}

service PluginController {
  // The one-time init of the loader
  rpc InitLoader(PluginLoaderInit) returns (stream PluginLoad) {}
  // Notification of a load failure
  rpc LoadFailed(PluginLoadFailed) returns (EmptyResponse) {}

  // Connect as a domain plugin establishing the bidirectional stream of communications
  rpc ConnectDomain(stream DomainMessage) returns (stream DomainMessage) {}

  // Connect as a transport plugin establishing the bidirectional stream of communications
  rpc ConnectTransport(stream TransportMessage) returns (stream TransportMessage) {}

  // Connect as a registry plugin establishing the bidirectional stream of communications
  rpc ConnectRegistry(stream RegistryMessage) returns (stream RegistryMessage) {}

  // Connect as a signing module plugin establishing the bidirectional stream of communications
  rpc ConnectSigningModule(stream SigningModuleMessage) returns (stream SigningModuleMessage) {}
}