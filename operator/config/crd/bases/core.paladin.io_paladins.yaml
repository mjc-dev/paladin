---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.3
  name: paladins.core.paladin.io
spec:
  group: core.paladin.io
  names:
    kind: Paladin
    listKind: PaladinList
    plural: paladins
    shortNames:
    - pld
    singular: paladin
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Paladin is the Schema for the paladin API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: PaladinSpec defines the desired state of Paladin
            properties:
              authConfig:
                description: |-
                  Deprecated: Use 'baseLedgerEndpoint' instead. Example:
                  { "baseLedgerEndpoint": {"type": "network", "network": {"auth": {}}} }
                properties:
                  inline:
                    description: Auth details are provided inline (not recommended)
                    properties:
                      password:
                        type: string
                      username:
                        type: string
                    required:
                    - password
                    - username
                    type: object
                  secretRef:
                    description: Secret is used to provide the name of the secret
                      to use for authentication
                    properties:
                      name:
                        description: The name of the secret to use for authentication
                        type: string
                    required:
                    - name
                    type: object
                  type:
                    description: auth method to use for the connection
                    enum:
                    - secret
                    - inline
                    type: string
                required:
                - type
                type: object
              baseLedgerEndpoint:
                description: BaseLedgerEndpoint specifies the base endpoint for the
                  ledger
                properties:
                  endpoint:
                    description: Network specifies the configuration when the type
                      is 'endpoint'.
                    properties:
                      auth:
                        properties:
                          inline:
                            description: Auth details are provided inline (not recommended)
                            properties:
                              password:
                                type: string
                              username:
                                type: string
                            required:
                            - password
                            - username
                            type: object
                          secretRef:
                            description: Secret is used to provide the name of the
                              secret to use for authentication
                            properties:
                              name:
                                description: The name of the secret to use for authentication
                                type: string
                            required:
                            - name
                            type: object
                          type:
                            description: auth method to use for the connection
                            enum:
                            - secret
                            - inline
                            type: string
                        required:
                        - type
                        type: object
                      jsonrpc:
                        type: string
                      ws:
                        type: string
                    required:
                    - jsonrpc
                    - ws
                    type: object
                  local:
                    description: Local specifies the configuration when the type is
                      'local'.
                    properties:
                      nodeName:
                        description: NodeName specifies the name of the local node.
                        type: string
                    required:
                    - nodeName
                    type: object
                  type:
                    description: Type specifies the type of the endpoint.
                    enum:
                    - local
                    - endpoint
                    type: string
                required:
                - type
                type: object
              besuNode:
                description: |-
                  Deprecated: Use 'baseLedgerEndpoint' instead. Example:
                  { "baseLedgerEndpoint": {"type": "local", "local": {"nodeName": "node-name"}} }

                  Optionally bind to a local Besu node deployed with this operator
                  (vs. configuring a connection to a production blockchain network).
                type: string
              config:
                description: Settings from this config will be loaded as YAML and
                  used as the base of the configuration.
                type: string
              database:
                description: |-
                  Database section k8s native functions for setting up the database
                  with auto-generation/auto-edit of the DB related config sections
                properties:
                  migrationMode:
                    default: preConfigured
                    enum:
                    - preConfigured
                    - auto
                    type: string
                  mode:
                    default: preConfigured
                    enum:
                    - preConfigured
                    - sidecarPostgres
                    - embeddedSQLite
                    type: string
                  passwordSecret:
                    description: If set then {{.username}} and {{.password}} variables
                      will be available in your DSN
                    type: string
                  pvcTemplate:
                    description: |-
                      PersistentVolumeClaimSpec describes the common attributes of storage devices
                      and allows a Source for provider-specific attributes
                    properties:
                      accessModes:
                        description: |-
                          accessModes contains the desired access modes the volume should have.
                          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                        items:
                          type: string
                        type: array
                      dataSource:
                        description: |-
                          dataSource field can be used to specify either:
                          * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                          * An existing PVC (PersistentVolumeClaim)
                          If the provisioner or an external controller can support the specified data source,
                          it will create a new volume based on the contents of the specified data source.
                          When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
                          and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
                          If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                        properties:
                          apiGroup:
                            description: |-
                              APIGroup is the group for the resource being referenced.
                              If APIGroup is not specified, the specified Kind must be in the core API group.
                              For any other third-party types, APIGroup is required.
                            type: string
                          kind:
                            description: Kind is the type of resource being referenced
                            type: string
                          name:
                            description: Name is the name of resource being referenced
                            type: string
                        required:
                        - kind
                        - name
                        type: object
                        x-kubernetes-map-type: atomic
                      dataSourceRef:
                        description: |-
                          dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
                          volume is desired. This may be any object from a non-empty API group (non
                          core object) or a PersistentVolumeClaim object.
                          When this field is specified, volume binding will only succeed if the type of
                          the specified object matches some installed volume populator or dynamic
                          provisioner.
                          This field will replace the functionality of the dataSource field and as such
                          if both fields are non-empty, they must have the same value. For backwards
                          compatibility, when namespace isn't specified in dataSourceRef,
                          both fields (dataSource and dataSourceRef) will be set to the same
                          value automatically if one of them is empty and the other is non-empty.
                          When namespace is specified in dataSourceRef,
                          dataSource isn't set to the same value and must be empty.
                          There are three important differences between dataSource and dataSourceRef:
                          * While dataSource only allows two specific types of objects, dataSourceRef
                            allows any non-core object, as well as PersistentVolumeClaim objects.
                          * While dataSource ignores disallowed values (dropping them), dataSourceRef
                            preserves all values, and generates an error if a disallowed value is
                            specified.
                          * While dataSource only allows local objects, dataSourceRef allows objects
                            in any namespaces.
                          (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
                          (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                        properties:
                          apiGroup:
                            description: |-
                              APIGroup is the group for the resource being referenced.
                              If APIGroup is not specified, the specified Kind must be in the core API group.
                              For any other third-party types, APIGroup is required.
                            type: string
                          kind:
                            description: Kind is the type of resource being referenced
                            type: string
                          name:
                            description: Name is the name of resource being referenced
                            type: string
                          namespace:
                            description: |-
                              Namespace is the namespace of resource being referenced
                              Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
                              (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                            type: string
                        required:
                        - kind
                        - name
                        type: object
                      resources:
                        description: |-
                          resources represents the minimum resources the volume should have.
                          If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
                          that are lower than previous value but must still be higher than capacity recorded in the
                          status field of the claim.
                          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                        properties:
                          limits:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: |-
                              Limits describes the maximum amount of compute resources allowed.
                              More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                            type: object
                          requests:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: |-
                              Requests describes the minimum amount of compute resources required.
                              If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                              otherwise to an implementation-defined value. Requests cannot exceed Limits.
                              More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                            type: object
                        type: object
                      selector:
                        description: selector is a label query over volumes to consider
                          for binding.
                        properties:
                          matchExpressions:
                            description: matchExpressions is a list of label selector
                              requirements. The requirements are ANDed.
                            items:
                              description: |-
                                A label selector requirement is a selector that contains values, a key, and an operator that
                                relates the key and values.
                              properties:
                                key:
                                  description: key is the label key that the selector
                                    applies to.
                                  type: string
                                operator:
                                  description: |-
                                    operator represents a key's relationship to a set of values.
                                    Valid operators are In, NotIn, Exists and DoesNotExist.
                                  type: string
                                values:
                                  description: |-
                                    values is an array of string values. If the operator is In or NotIn,
                                    the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                    the values array must be empty. This array is replaced during a strategic
                                    merge patch.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - key
                              - operator
                              type: object
                            type: array
                          matchLabels:
                            additionalProperties:
                              type: string
                            description: |-
                              matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                              map is equivalent to an element of matchExpressions, whose key field is "key", the
                              operator is "In", and the values array contains only "value". The requirements are ANDed.
                            type: object
                        type: object
                        x-kubernetes-map-type: atomic
                      storageClassName:
                        description: |-
                          storageClassName is the name of the StorageClass required by the claim.
                          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                        type: string
                      volumeAttributesClassName:
                        description: |-
                          volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
                          If specified, the CSI driver will create or update the volume with the attributes defined
                          in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
                          it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
                          will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
                          If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
                          will be set by the persistentvolume controller if it exists.
                          If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
                          set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
                          exists.
                          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
                          (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
                        type: string
                      volumeMode:
                        description: |-
                          volumeMode defines what type of volume is required by the claim.
                          Value of Filesystem is implied when not included in claim spec.
                        type: string
                      volumeName:
                        description: volumeName is the binding reference to the PersistentVolume
                          backing this claim.
                        type: string
                    type: object
                type: object
              domains:
                description: A list of domains to merge into the configuration, and
                  rebuild the config of paladin when this list changes
                items:
                  description: |-
                    Each domain reference can select one or more domains to include via label selectors
                    Most common to use a simple one-reference-per-domain approach.
                  properties:
                    labelSelector:
                      description: |-
                        Label selectors provide a flexible many-to-many mapping between nodes and domains in a namespace.
                        The domain CRs you reference must be labelled to match. For example you could use a label like "paladin.io/domain-name" to select by name.
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            description: |-
                              A label selector requirement is a selector that contains values, a key, and an operator that
                              relates the key and values.
                            properties:
                              key:
                                description: key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: |-
                                  operator represents a key's relationship to a set of values.
                                  Valid operators are In, NotIn, Exists and DoesNotExist.
                                type: string
                              values:
                                description: |-
                                  values is an array of string values. If the operator is In or NotIn,
                                  the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                  the values array must be empty. This array is replaced during a strategic
                                  merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: |-
                            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                            map is equivalent to an element of matchExpressions, whose key field is "key", the
                            operator is "In", and the values array contains only "value". The requirements are ANDed.
                          type: object
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                  - labelSelector
                  type: object
                type: array
              registries:
                description: A list of registries to merge into the configuration,
                  and rebuild the config of paladin when this list changes
                items:
                  description: |-
                    Each registry reference can select one or more domains to include via label selectors
                    Most common to use a simple one-reference-per-domain approach.
                  properties:
                    labelSelector:
                      description: |-
                        Label selectors provide a flexible many-to-many mapping between nodes and domains in a namespace.
                        The domain CRs you reference must be labelled to match. For example you could use a label like "paladin.io/domain-name" to select by name.
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            description: |-
                              A label selector requirement is a selector that contains values, a key, and an operator that
                              relates the key and values.
                            properties:
                              key:
                                description: key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: |-
                                  operator represents a key's relationship to a set of values.
                                  Valid operators are In, NotIn, Exists and DoesNotExist.
                                type: string
                              values:
                                description: |-
                                  values is an array of string values. If the operator is In or NotIn,
                                  the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                  the values array must be empty. This array is replaced during a strategic
                                  merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: |-
                            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                            map is equivalent to an element of matchExpressions, whose key field is "key", the
                            operator is "In", and the values array contains only "value". The requirements are ANDed.
                          type: object
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                  - labelSelector
                  type: object
                type: array
              secretBackedSigners:
                description: Adds signing modules that load their key materials from
                  a k8s secret
                items:
                  properties:
                    keySelector:
                      default: .*
                      description: |-
                        Wallets will be evaluated against new allocations of key identifiers in the order they are
                        defined. The key selector regular expression allows wallets to sub-select, with more specific
                        rules first on key matching and more generic rules (like the default of ".*") last.
                      type: string
                    name:
                      pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                      type: string
                    secret:
                      type: string
                    type:
                      default: autoHDWallet
                      description: |-
                        The operator supports generating the seed and base config for a simple seeded BIP32 HDWallet signer.
                        If more other options are needed, these can be set directly in the YAML config for this signer.
                      enum:
                      - autoHDWallet
                      - preConfigured
                      type: string
                  required:
                  - keySelector
                  - name
                  - secret
                  - type
                  type: object
                type: array
              service:
                description: |-
                  Optionally tune the service definition.
                  We merge any configuration you add (such as node ports) for the following services:
                  "rpc-http" - 8545 (TCP),
                  "rpc-ws" - 8546 (TCP)
                properties:
                  allocateLoadBalancerNodePorts:
                    description: |-
                      allocateLoadBalancerNodePorts defines if NodePorts will be automatically
                      allocated for services with type LoadBalancer.  Default is "true". It
                      may be set to "false" if the cluster load-balancer does not rely on
                      NodePorts.  If the caller requests specific NodePorts (by specifying a
                      value), those requests will be respected, regardless of this field.
                      This field may only be set for services with type LoadBalancer and will
                      be cleared if the type is changed to any other type.
                    type: boolean
                  clusterIP:
                    description: |-
                      clusterIP is the IP address of the service and is usually assigned
                      randomly. If an address is specified manually, is in-range (as per
                      system configuration), and is not in use, it will be allocated to the
                      service; otherwise creation of the service will fail. This field may not
                      be changed through updates unless the type field is also being changed
                      to ExternalName (which requires this field to be blank) or the type
                      field is being changed from ExternalName (in which case this field may
                      optionally be specified, as describe above).  Valid values are "None",
                      empty string (""), or a valid IP address. Setting this to "None" makes a
                      "headless service" (no virtual IP), which is useful when direct endpoint
                      connections are preferred and proxying is not required.  Only applies to
                      types ClusterIP, NodePort, and LoadBalancer. If this field is specified
                      when creating a Service of type ExternalName, creation will fail. This
                      field will be wiped when updating a Service to type ExternalName.
                      More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                    type: string
                  clusterIPs:
                    description: |-
                      ClusterIPs is a list of IP addresses assigned to this service, and are
                      usually assigned randomly.  If an address is specified manually, is
                      in-range (as per system configuration), and is not in use, it will be
                      allocated to the service; otherwise creation of the service will fail.
                      This field may not be changed through updates unless the type field is
                      also being changed to ExternalName (which requires this field to be
                      empty) or the type field is being changed from ExternalName (in which
                      case this field may optionally be specified, as describe above).  Valid
                      values are "None", empty string (""), or a valid IP address.  Setting
                      this to "None" makes a "headless service" (no virtual IP), which is
                      useful when direct endpoint connections are preferred and proxying is
                      not required.  Only applies to types ClusterIP, NodePort, and
                      LoadBalancer. If this field is specified when creating a Service of type
                      ExternalName, creation will fail. This field will be wiped when updating
                      a Service to type ExternalName.  If this field is not specified, it will
                      be initialized from the clusterIP field.  If this field is specified,
                      clients must ensure that clusterIPs[0] and clusterIP have the same
                      value.

                      This field may hold a maximum of two entries (dual-stack IPs, in either order).
                      These IPs must correspond to the values of the ipFamilies field. Both
                      clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
                      More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                    items:
                      type: string
                    type: array
                    x-kubernetes-list-type: atomic
                  externalIPs:
                    description: |-
                      externalIPs is a list of IP addresses for which nodes in the cluster
                      will also accept traffic for this service.  These IPs are not managed by
                      Kubernetes.  The user is responsible for ensuring that traffic arrives
                      at a node with this IP.  A common example is external load-balancers
                      that are not part of the Kubernetes system.
                    items:
                      type: string
                    type: array
                  externalName:
                    description: |-
                      externalName is the external reference that discovery mechanisms will
                      return as an alias for this service (e.g. a DNS CNAME record). No
                      proxying will be involved.  Must be a lowercase RFC-1123 hostname
                      (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                    type: string
                  externalTrafficPolicy:
                    description: |-
                      externalTrafficPolicy describes how nodes distribute service traffic they
                      receive on one of the Service's "externally-facing" addresses (NodePorts,
                      ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
                      the service in a way that assumes that external load balancers will take care
                      of balancing the service traffic between nodes, and so each node will deliver
                      traffic only to the node-local endpoints of the service, without masquerading
                      the client source IP. (Traffic mistakenly sent to a node with no endpoints will
                      be dropped.) The default value, "Cluster", uses the standard behavior of
                      routing to all endpoints evenly (possibly modified by topology and other
                      features). Note that traffic sent to an External IP or LoadBalancer IP from
                      within the cluster will always get "Cluster" semantics, but clients sending to
                      a NodePort from within the cluster may need to take traffic policy into account
                      when picking a node.
                    type: string
                  healthCheckNodePort:
                    description: |-
                      healthCheckNodePort specifies the healthcheck nodePort for the service.
                      This only applies when type is set to LoadBalancer and
                      externalTrafficPolicy is set to Local. If a value is specified, is
                      in-range, and is not in use, it will be used.  If not specified, a value
                      will be automatically allocated.  External systems (e.g. load-balancers)
                      can use this port to determine if a given node holds endpoints for this
                      service or not.  If this field is specified when creating a Service
                      which does not need it, creation will fail. This field will be wiped
                      when updating a Service to no longer need it (e.g. changing type).
                      This field cannot be updated once set.
                    format: int32
                    type: integer
                  internalTrafficPolicy:
                    description: |-
                      InternalTrafficPolicy describes how nodes distribute service traffic they
                      receive on the ClusterIP. If set to "Local", the proxy will assume that pods
                      only want to talk to endpoints of the service on the same node as the pod,
                      dropping the traffic if there are no local endpoints. The default value,
                      "Cluster", uses the standard behavior of routing to all endpoints evenly
                      (possibly modified by topology and other features).
                    type: string
                  ipFamilies:
                    description: |-
                      IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
                      service. This field is usually assigned automatically based on cluster
                      configuration and the ipFamilyPolicy field. If this field is specified
                      manually, the requested family is available in the cluster,
                      and ipFamilyPolicy allows it, it will be used; otherwise creation of
                      the service will fail. This field is conditionally mutable: it allows
                      for adding or removing a secondary IP family, but it does not allow
                      changing the primary IP family of the Service. Valid values are "IPv4"
                      and "IPv6".  This field only applies to Services of types ClusterIP,
                      NodePort, and LoadBalancer, and does apply to "headless" services.
                      This field will be wiped when updating a Service to type ExternalName.

                      This field may hold a maximum of two entries (dual-stack families, in
                      either order).  These families must correspond to the values of the
                      clusterIPs field, if specified. Both clusterIPs and ipFamilies are
                      governed by the ipFamilyPolicy field.
                    items:
                      description: |-
                        IPFamily represents the IP Family (IPv4 or IPv6). This type is used
                        to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                      type: string
                    type: array
                    x-kubernetes-list-type: atomic
                  ipFamilyPolicy:
                    description: |-
                      IPFamilyPolicy represents the dual-stack-ness requested or required by
                      this Service. If there is no value provided, then this field will be set
                      to SingleStack. Services can be "SingleStack" (a single IP family),
                      "PreferDualStack" (two IP families on dual-stack configured clusters or
                      a single IP family on single-stack clusters), or "RequireDualStack"
                      (two IP families on dual-stack configured clusters, otherwise fail). The
                      ipFamilies and clusterIPs fields depend on the value of this field. This
                      field will be wiped when updating a service to type ExternalName.
                    type: string
                  loadBalancerClass:
                    description: |-
                      loadBalancerClass is the class of the load balancer implementation this Service belongs to.
                      If specified, the value of this field must be a label-style identifier, with an optional prefix,
                      e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
                      This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
                      balancer implementation is used, today this is typically done through the cloud provider integration,
                      but should apply for any default implementation. If set, it is assumed that a load balancer
                      implementation is watching for Services with a matching class. Any default load balancer
                      implementation (e.g. cloud providers) should ignore Services that set this field.
                      This field can only be set when creating or updating a Service to type 'LoadBalancer'.
                      Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                    type: string
                  loadBalancerIP:
                    description: |-
                      Only applies to Service Type: LoadBalancer.
                      This feature depends on whether the underlying cloud-provider supports specifying
                      the loadBalancerIP when a load balancer is created.
                      This field will be ignored if the cloud-provider does not support the feature.
                      Deprecated: This field was under-specified and its meaning varies across implementations.
                      Using it is non-portable and it may not support dual-stack.
                      Users are encouraged to use implementation-specific annotations when available.
                    type: string
                  loadBalancerSourceRanges:
                    description: |-
                      If specified and supported by the platform, this will restrict traffic through the cloud-provider
                      load-balancer will be restricted to the specified client IPs. This field will be ignored if the
                      cloud-provider does not support the feature."
                      More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
                    items:
                      type: string
                    type: array
                  ports:
                    description: |-
                      The list of ports that are exposed by this service.
                      More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                    items:
                      description: ServicePort contains information on service's port.
                      properties:
                        appProtocol:
                          description: |-
                            The application protocol for this port.
                            This is used as a hint for implementations to offer richer behavior for protocols that they understand.
                            This field follows standard Kubernetes label syntax.
                            Valid values are either:

                            * Un-prefixed protocol names - reserved for IANA standard service names (as per
                            RFC-6335 and https://www.iana.org/assignments/service-names).

                            * Kubernetes-defined prefixed names:
                              * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
                              * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
                              * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455

                            * Other protocols should use implementation-defined prefixed names such as
                            mycompany.com/my-custom-protocol.
                          type: string
                        name:
                          description: |-
                            The name of this port within the service. This must be a DNS_LABEL.
                            All ports within a ServiceSpec must have unique names. When considering
                            the endpoints for a Service, this must match the 'name' field in the
                            EndpointPort.
                            Optional if only one ServicePort is defined on this service.
                          type: string
                        nodePort:
                          description: |-
                            The port on each node on which this service is exposed when type is
                            NodePort or LoadBalancer.  Usually assigned by the system. If a value is
                            specified, in-range, and not in use it will be used, otherwise the
                            operation will fail.  If not specified, a port will be allocated if this
                            Service requires one.  If this field is specified when creating a
                            Service which does not need it, creation will fail. This field will be
                            wiped when updating a Service to no longer need it (e.g. changing type
                            from NodePort to ClusterIP).
                            More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                          format: int32
                          type: integer
                        port:
                          description: The port that will be exposed by this service.
                          format: int32
                          type: integer
                        protocol:
                          default: TCP
                          description: |-
                            The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
                            Default is TCP.
                          type: string
                        targetPort:
                          anyOf:
                          - type: integer
                          - type: string
                          description: |-
                            Number or name of the port to access on the pods targeted by the service.
                            Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                            If this is a string, it will be looked up as a named port in the
                            target Pod's container ports. If this is not specified, the value
                            of the 'port' field is used (an identity map).
                            This field is ignored for services with clusterIP=None, and should be
                            omitted or set equal to the 'port' field.
                            More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
                          x-kubernetes-int-or-string: true
                      required:
                      - port
                      type: object
                    type: array
                    x-kubernetes-list-map-keys:
                    - port
                    - protocol
                    x-kubernetes-list-type: map
                  publishNotReadyAddresses:
                    description: |-
                      publishNotReadyAddresses indicates that any agent which deals with endpoints for this
                      Service should disregard any indications of ready/not-ready.
                      The primary use case for setting this field is for a StatefulSet's Headless Service to
                      propagate SRV DNS records for its Pods for the purpose of peer discovery.
                      The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
                      Services interpret this to mean that all endpoints are considered "ready" even if the
                      Pods themselves are not. Agents which consume only Kubernetes generated endpoints
                      through the Endpoints or EndpointSlice resources can safely assume this behavior.
                    type: boolean
                  selector:
                    additionalProperties:
                      type: string
                    description: |-
                      Route service traffic to pods with label keys and values matching this
                      selector. If empty or not present, the service is assumed to have an
                      external process managing its endpoints, which Kubernetes will not
                      modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
                      Ignored if type is ExternalName.
                      More info: https://kubernetes.io/docs/concepts/services-networking/service/
                    type: object
                    x-kubernetes-map-type: atomic
                  sessionAffinity:
                    description: |-
                      Supports "ClientIP" and "None". Used to maintain session affinity.
                      Enable client IP based session affinity.
                      Must be ClientIP or None.
                      Defaults to None.
                      More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                    type: string
                  sessionAffinityConfig:
                    description: sessionAffinityConfig contains the configurations
                      of session affinity.
                    properties:
                      clientIP:
                        description: clientIP contains the configurations of Client
                          IP based session affinity.
                        properties:
                          timeoutSeconds:
                            description: |-
                              timeoutSeconds specifies the seconds of ClientIP type session sticky time.
                              The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
                              Default value is 10800(for 3 hours).
                            format: int32
                            type: integer
                        type: object
                    type: object
                  type:
                    description: |-
                      type determines how the Service is exposed. Defaults to ClusterIP. Valid
                      options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
                      "ClusterIP" allocates a cluster-internal IP address for load-balancing
                      to endpoints. Endpoints are determined by the selector or if that is not
                      specified, by manual construction of an Endpoints object or
                      EndpointSlice objects. If clusterIP is "None", no virtual IP is
                      allocated and the endpoints are published as a set of endpoints rather
                      than a virtual IP.
                      "NodePort" builds on ClusterIP and allocates a port on every node which
                      routes to the same endpoints as the clusterIP.
                      "LoadBalancer" builds on NodePort and creates an external load-balancer
                      (if supported in the current cloud) which routes to the same endpoints
                      as the clusterIP.
                      "ExternalName" aliases this service to the specified externalName.
                      Several other fields do not apply to ExternalName services.
                      More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
                    type: string
                type: object
              signingModules:
                description: A list of pluggable signing modules to merge into the
                  configuration, and rebuild the config of paladin when this list
                  changes
                items:
                  properties:
                    configJSON:
                      description: JSON configuration specific to the individual signing
                        module.
                      type: string
                    name:
                      type: string
                    plugin:
                      description: Plugin configuration for loading the signing module
                      properties:
                        class:
                          description: For Java only, the name of the class to load
                            from the Jar
                          type: string
                        library:
                          description: The location of the library - do not include
                            the "lib" prefix or the ".so" suffix for shared libraries
                          type: string
                        type:
                          description: The library type to load
                          enum:
                          - c-shared
                          - jar
                          type: string
                      required:
                      - library
                      - type
                      type: object
                  required:
                  - configJSON
                  - name
                  - plugin
                  type: object
                type: array
              transports:
                description: Transports are configured individually on each node,
                  as they reference security details specific to that node
                items:
                  properties:
                    configJSON:
                      description: |-
                        JSON configuration specific to the individual transport.
                        The "tls" root section of the config will be automatically populated from the k8s secret.
                        The "externalHostname" property will be automatically set to the internal k8s hostname, unless it is already set in the configJSON
                      type: string
                    name:
                      type: string
                    plugin:
                      description: Plugin configuration for loading the transport
                      properties:
                        class:
                          description: For Java only, the name of the class to load
                            from the Jar
                          type: string
                        library:
                          description: The location of the library - do not include
                            the "lib" prefix or the ".so" suffix for shared libraries
                          type: string
                        type:
                          description: The library type to load
                          enum:
                          - c-shared
                          - jar
                          type: string
                      required:
                      - library
                      - type
                      type: object
                    ports:
                      description: The port number to listen on this transport
                      items:
                        description: ServicePort contains information on service's
                          port.
                        properties:
                          appProtocol:
                            description: |-
                              The application protocol for this port.
                              This is used as a hint for implementations to offer richer behavior for protocols that they understand.
                              This field follows standard Kubernetes label syntax.
                              Valid values are either:

                              * Un-prefixed protocol names - reserved for IANA standard service names (as per
                              RFC-6335 and https://www.iana.org/assignments/service-names).

                              * Kubernetes-defined prefixed names:
                                * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
                                * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
                                * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455

                              * Other protocols should use implementation-defined prefixed names such as
                              mycompany.com/my-custom-protocol.
                            type: string
                          name:
                            description: |-
                              The name of this port within the service. This must be a DNS_LABEL.
                              All ports within a ServiceSpec must have unique names. When considering
                              the endpoints for a Service, this must match the 'name' field in the
                              EndpointPort.
                              Optional if only one ServicePort is defined on this service.
                            type: string
                          nodePort:
                            description: |-
                              The port on each node on which this service is exposed when type is
                              NodePort or LoadBalancer.  Usually assigned by the system. If a value is
                              specified, in-range, and not in use it will be used, otherwise the
                              operation will fail.  If not specified, a port will be allocated if this
                              Service requires one.  If this field is specified when creating a
                              Service which does not need it, creation will fail. This field will be
                              wiped when updating a Service to no longer need it (e.g. changing type
                              from NodePort to ClusterIP).
                              More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                            format: int32
                            type: integer
                          port:
                            description: The port that will be exposed by this service.
                            format: int32
                            type: integer
                          protocol:
                            default: TCP
                            description: |-
                              The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
                              Default is TCP.
                            type: string
                          targetPort:
                            anyOf:
                            - type: integer
                            - type: string
                            description: |-
                              Number or name of the port to access on the pods targeted by the service.
                              Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                              If this is a string, it will be looked up as a named port in the
                              target Pod's container ports. If this is not specified, the value
                              of the 'port' field is used (an identity map).
                              This field is ignored for services with clusterIP=None, and should be
                              omitted or set equal to the 'port' field.
                              More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
                            x-kubernetes-int-or-string: true
                        required:
                        - port
                        type: object
                      type: array
                    tls:
                      description: TLS configuration to use for this secret
                      properties:
                        additionalDNSNames:
                          description: Additional DNS names to add to the definition
                            (for external hostnames) when using automatic cert-manager
                          items:
                            type: string
                          type: array
                        certName:
                          description: |-
                            If specified then a cert-manager.io/v1 Certificate will be created for the internal DNS names of the service.
                            If you define multiple transports that share a secret, then only specify this on one.
                          type: string
                        certSpecTemplate:
                          description: |-
                            Go template for the YAML spec of the issuer CR, which will have access to the inserts when building:
                            {{.nodeName}} {{.dnsNames}} {{.secretName}} {{.issuer}}
                            Where .nodeName is that placed in the config
                            This approach allows us to avoid a build-time dependency on the CertManager CRs, while letting you
                            customize things like the algorithm.
                          type: string
                        issuer:
                          default: selfsigned-issuer
                          description: Issuer for the certificate if a certificateName
                            is specified (note cluster issuer can be used with a custom
                            certSpecTemplate)
                          type: string
                        secretName:
                          description: Secret name is required
                          type: string
                      required:
                      - certName
                      - secretName
                      type: object
                  required:
                  - configJSON
                  - name
                  - plugin
                  - ports
                  type: object
                type: array
            required:
            - domains
            - registries
            - transports
            type: object
          status:
            description: Status defines the observed state of a given object
            properties:
              conditions:
                description: Conditions represent the latest available observations
                  of the Besu's state
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              phase:
                description: Phase represents the current phase of the Besu resource
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
