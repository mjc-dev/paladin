// Copyright Â© 2025 Kaleido, Inc.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package msgs

import (
	"fmt"
	"strings"
	"sync"

	"github.com/kaleido-io/paladin/toolkit/pkg/i18n"
	"golang.org/x/text/language"
)

const paladinCoreGoPrefix = "PD01"

var registered sync.Once
var pde = func(key, translation string, statusHint ...int) i18n.ErrorMessageKey {
	registered.Do(func() {
		i18n.RegisterPrefix(paladinCoreGoPrefix, "Paladin Transaction Manager")
	})
	if !strings.HasPrefix(key, paladinCoreGoPrefix) {
		panic(fmt.Errorf("must have prefix '%s': %s", paladinCoreGoPrefix, key))
	}
	return i18n.PDE(language.AmericanEnglish, key, translation, statusHint...)
}

var (
	// Components PD0100XX
	MsgComponentKeyManagerInitError        = pde("PD010000", "Error initializing key manager")
	MsgComponentKeyManagerStartError       = pde("PD010001", "Error starting key manager")
	MsgComponentEthClientInitError         = pde("PD010002", "Error initializing ethereum client")
	MsgComponentEthClientStartError        = pde("PD010003", "Error starting ethereum client")
	MsgComponentDBInitError                = pde("PD010004", "Error initializing database")
	MsgComponentDBStartError               = pde("PD010005", "Error starting database")
	MsgComponentStateManagerInitError      = pde("PD010006", "Error initializing state store")
	MsgComponentStateManagerStartError     = pde("PD010007", "Error starting state store")
	MsgComponentBlockIndexerInitError      = pde("PD010008", "Error initializing block indexer")
	MsgComponentBlockIndexerStartError     = pde("PD010009", "Error starting block indexer ")
	MsgComponentRPCServerInitError         = pde("PD010010", "Error initializing RPC server")
	MsgComponentRPCServerStartError        = pde("PD010011", "Error starting RPC server ")
	MsgComponentDomainInitError            = pde("PD010012", "Error initializing domains")
	MsgComponentDomainStartError           = pde("PD010013", "Error starting domain manager")
	MsgComponentPluginInitError            = pde("PD010014", "Error initializing plugin manager")
	MsgComponentPluginStartError           = pde("PD010015", "Error starting plugin manager ")
	MsgComponentWaitPluginStartError       = pde("PD010016", "Error waiting for plugins to start")
	MsgComponentEngineInitError            = pde("PD010017", "Error initializing engine")
	MsgComponentEngineStartError           = pde("PD010018", "Error starting engine")
	MsgComponentTransportInitError         = pde("PD010019", "Error initializing transport manager")
	MsgComponentTransportStartError        = pde("PD010020", "Error starting transport manager")
	MsgComponentRegistryInitError          = pde("PD010021", "Error initializing registry manager")
	MsgComponentRegistryStartError         = pde("PD010022", "Error starting registry manager")
	MsgComponentPublicTxnManagerInitError  = pde("PD010023", "Error initializing public transaction manager")
	MsgComponentPublicTxManagerStartError  = pde("PD010024", "Error starting public transaction manager ")
	MsgComponentPrivateTxManagerInitError  = pde("PD010025", "Error initializing private transaction manager")
	MsgComponentPrivateTxManagerStartError = pde("PD010026", "Error starting private transaction manager ")
	MsgComponentTxManagerInitError         = pde("PD010027", "Error initializing transaction manager")
	MsgComponentTxManagerStartError        = pde("PD010028", "Error starting transaction manager ")
	MsgComponentIdentityResolverInitError  = pde("PD010029", "Error initializing identity resolver")
	MsgComponentIdentityResolverStartError = pde("PD010030", "Error starting identity resolver")
	MsgComponentAdditionalMgrInitError     = pde("PD010031", "Error initializing %s manager")
	MsgComponentAdditionalMgrStartError    = pde("PD010032", "Error initializing %s manager")
	MsgComponentDebugServerStartError      = pde("PD010033", "Error starting debug server")
	MsgComponentGroupManagerInitError      = pde("PD010034", "Error initializing privacy group manager")
	MsgComponentGroupManagerStartError     = pde("PD010035", "Error starting group manager ")

	// States PD0101XX
	MsgStateInvalidLength             = pde("PD010101", "Invalid hash len expected=%d actual=%d")
	MsgStateInvalidABIParam           = pde("PD010102", "Invalid ABI parameter")
	MsgStateInvalidSchemaType         = pde("PD010103", "Invalid state schema type: %s")
	MsgStateManagerQuiescing          = pde("PD010104", "State store shutting down")
	MsgStateSchemaNotFound            = pde("PD010106", "Schema not found with hash %s")
	MsgStateLabelFieldNotElementary   = pde("PD010107", "Label field %s is not elementary type (%s)")
	MsgStateLabelFieldNotNamed        = pde("PD010108", "Label field with index %d is not named")
	MsgStateLabelFieldUnexpectedValue = pde("PD010109", "Value type for field %s %T from ABI decoding library does not match expected value type %T")
	MsgStateLabelFieldMissing         = pde("PD010110", "Label field %s missing")
	MsgStateLabelFieldNotSupported    = pde("PD010111", "Label field %s is not a supported elementary type (%s)")
	MsgStateNotFound                  = pde("PD010112", "State not found with hash %s")
	MsgStateInvalidSchema             = pde("PD010113", "Invalid schema")
	MsgStateABITypeMustBeTuple        = pde("PD010114", "ABI type definition must be a tuple parameter with an internalType such as 'struct StructName'")
	MsgStateLabelFieldNotUnique       = pde("PD010115", "Label field with index %d has a duplicate name '%s'")
	MsgStateInvalidValue              = pde("PD010116", "Invalid value")
	MsgStateLockCreateNotInContext    = pde("PD010118", "Cannot mark a creating lock for state %s as it was not added in this context")
	MsgStateFlushFailedDomainReset    = pde("PD010119", "Flush of state for domain %s contract %s has failed. The domain context must be reset")
	MsgStateSpendConflictUnexpected   = pde("PD010120", "Pending spend for transaction %s found when attempting to spend from transaction %s")
	MsgStateConfirmConflictUnexpected = pde("PD010121", "Pending confirmation for transaction %s found when attempting to confirm from transaction %s")
	MsgStateDomainContextClosed       = pde("PD010122", "Domain context has been closed")
	MsgStateDomainContextNotActive    = pde("PD010123", "There is no domain context with UUID %s active")
	MsgStateLockNoTransaction         = pde("PD010124", "Transaction missing from state lock")
	MsgStateLockNoState               = pde("PD010125", "State missing from state lock")
	MsgStateNullifierStateNotInCtx    = pde("PD010126", "State %s referred to by nullifier %s has not previously been added to the context")
	MsgStateNullifierConflict         = pde("PD010127", "State %s already has nullifier %s associated in this context")
	MsgStateInvalidCalculatingHash    = pde("PD010128", "Failed to generate hash as state is invalid")
	MsgStateHashMismatch              = pde("PD010129", "The supplied state ID '%s' does not match the state hash '%s'")
	MsgStateIDMissing                 = pde("PD010130", "The state id must be supplied for this domain")
	MsgStateFlushInProgress           = pde("PD010131", "A flush is already in progress for this domain context")
	MsgDomainContextImportInvalidJSON = pde("PD010132", "Attempted to import state locks but the JSON could not be parsed")
	MsgDomainContextImportBadStates   = pde("PD010133", "Attempted to import state failed")

	// Persistence PD0102XX
	MsgPersistenceInvalidType          = pde("PD010200", "Invalid persistence type: %s")
	MsgPersistenceMissingDSN           = pde("PD010201", "Missing database connection Data Source Name (DSN)")
	MsgPersistenceInitFailed           = pde("PD010202", "Database init failed")
	MsgPersistenceMigrationFailed      = pde("PD010203", "Database migration failed")
	MsgPersistenceMissingMigrationDir  = pde("PD010204", "Missing database migration directory for autoMigrate")
	MsgPersistenceInvalidDSNTemplate   = pde("PD010205", "dsnParams were provided, but the DSN supplied is not a valid template")
	MsgPersistenceDSNParamLoadFile     = pde("PD010206", "Failed to load dsnParams[%s] from '%s'")
	MsgPersistenceDSNTemplateFail      = pde("PD010207", "Templated substitution into database connection DSN failed")
	MsgPersistenceErrorInDBTransaction = pde("PD010208", "An unhandled error occurred within the database transaction: %v")

	// Transaction Processor PD0103XX
	MsgTransactionProcessorInvalidStage         = pde("PD010300", "Invalid stage: %s")
	MsgContextCanceled                          = pde("PD010301", "Context canceled")
	MsgTransactionProcessorActionFailed         = pde("PD010302", "Action for transaction with ID: %s at stage %s failed")
	MsgTransactionProcessorBlockedOnDependency  = pde("PD010303", "Transaction with ID: %s cannot be processed by %s stage due to dependent transactions.")
	MsgTransactionProcessorUndeterminedStage    = pde("PD010304", "Cannot determine a processing stage for transaction with ID: %s")
	MsgTransactionProcessorEmptyAssembledResult = pde("PD010305", "No transaction was assembled for transaction with ID: %s")

	// Transaction store PD0104XX
	MsgTransactionMissingField         = pde("PD010400", "Must provide a payload (one of PayloadJSON or PayloadRLP), from, and contract address.  Missing %v")
	MsgTransactionParseError           = pde("PD010401", "Failed to parse transaction message.")
	MsgTransactionSerializeError       = pde("PD010402", "Failed to serialize transaction response.")
	MsgTransactionInvalidTransactionID = pde("PD010403", "The provided ID %s cannot be parsed into a valid UUID due to %s")

	// Key manager PD0105XX
	MsgKeyManagerInvalidIdentifier          = pde("PD010500", "Invalid key identifier: '%s'")
	MsgKeyManagerNoWalletMatch              = pde("PD010501", "No configured wallet has a keySelector that matches '%s'")
	MsgKeyManagerOptimisticRetry            = pde("PD010502", "Retry after allocation race for identifier '%s'")
	MsgKeyManagerWalletNotConfigured        = pde("PD010503", "No wallet called '%s' is configured on this node")
	MsgKeyManagerKeyHandleNonDeterminism    = pde("PD010504", "Signing module for wallet '%s' returned key handle '%s' from key resolution of verifier %s, mismatching key handle '%s' returned previously the same key")
	MsgKeyManagerInvalidResolveResponse     = pde("PD010505", "Signing module for wallet '%s' returned invalid response")
	MsgKeyManagerInvalidWalletSignerType    = pde("PD010506", "Invalid signer type '%s' configured for wallet '%s'")
	MsgKeyManagerEmbeddedSignerFailInit     = pde("PD010507", "Initialization of embedded signer for wallet '%s' failed")
	MsgKeyManagerInvalidConfig              = pde("PD010508", "Configuration for wallet '%s' invalid")
	MsgKeyManagerDuplicateName              = pde("PD010509", "Duplicate wallet name '%s'")
	MsgKeyManagerInvalidKeySelector         = pde("PD010510", "Key selector for wallet '%s' invalid")
	MsgKeyManagerVerifierLookupNotFound     = pde("PD010511", "Verifier not available in reverse lookup table")
	MsgKeyManagerIdentifierPathNotFound     = pde("PD010512", "Identifier path segment '%s' not found in database")
	MsgKeyManagerExistingIdentifierNotFound = pde("PD010513", "Identifier '%s' not found in database")
	MsgKeyManagerMissingDatabaseTxn         = pde("PD010514", "Missing database transaction context")
	MsgKeyManagerSigningModuleNotFound      = pde("PD010515", "Signing module '%s' not found")
	MsgKeyManagerPluginSignerEmptyName      = pde("PD010516", "Wallet signing module plugin name cannot be empty")

	// Comms bus PD0106XX
	MsgDestinationNotFound     = pde("PD010600", "Destination not found: %s")
	MsgHandlerError            = pde("PD010601", "Error from message handler")
	MsgDuplicateSubscription   = pde("PD010602", "Destination %s already subscribed to topic %s")
	MsgErrorStoppingGRPCServer = pde("PD010603", "Error stopping GRPC server")

	// Filters PD0107XX
	MsgFiltersUnknownField                = pde("PD010700", "Unknown field '%s'")
	MsgFiltersJSONQueryValueUnsupported   = pde("PD010701", "JSON query value not supported: %s")
	MsgFiltersJSONQueryOpUnsupportedMod   = pde("PD010702", "Operation '%s' does not support modifiers: %v")
	MsgFiltersValueInvalidForInt64        = pde("PD010703", "Value '%s' cannot be parsed as a 64bit signed integer")
	MsgFiltersValueInvalidForBool         = pde("PD010704", "Value '%s' cannot be parsed as a boolean")
	MsgFiltersValueInvalidForString       = pde("PD010705", "Value '%s' cannot be parsed as a string")
	MsgFiltersValueIntStringParseFail     = pde("PD010707", "Value '%s' cannot be converted to a big integer")
	MsgFiltersValueMissing                = pde("PD010708", "Value missing for filter field '%s'")
	MsgFiltersMustBeBuiltUnscoped         = pde("PD010709", "Scoped SQL builder (rather than DB) incorrect passed into filter builder")
	MsgFiltersJSONValueParseError         = pde("PD010710", "Failed to parse value for field '%s' (as %T): %v")
	MsgFiltersValueInvalidHex             = pde("PD010711", "Failed to parse value as hex: %v")
	MsgFiltersUnexpectedFieldResolverType = pde("PD010712", "Unsupported type '%T' returned from field resolver '%T'")
	MsgFiltersUnexpectedResolvedValueType = pde("PD010713", "Value type '%T' mismatched from compare type '%T'")
	MsgFiltersLikeNotSupportedForIntValue = pde("PD010714", "LIKE operation not supported for int64 stored values")
	MsgFiltersLikeConversionToRegexpFail  = pde("PD010715", "Failed to convert LIKE string '%s' to regexp: %s")
	MsgFiltersFieldTypeDoesNotSupportLike = pde("PD010716", "Field does not support LIKE comparison (%T)")
	MsgFiltersTypeErrorDuringCompare      = pde("PD010717", "Mismatched types during compare t1=%T t2=%T")
	MsgFiltersMissingSortField            = pde("PD010718", "Must specify at least one sort field")
	MsgFiltersValueInvalidHexBytes32      = pde("PD010719", "Failed to parse value as 32 byte hex string (parsedBytes=%d)")
	MsgFiltersValueInvalidUUID            = pde("PD010720", "Failed to parse value as UUID: %v")
	MsgFiltersQueryLimitRequired          = pde("PD010721", "limit is required on all queries")

	// Plugin controller PD0112XX
	MsgPluginLoaderUUIDError   = pde("PD011200", "Plugin loader UUID incorrect")
	MsgPluginLoaderAlreadyInit = pde("PD011201", "Plugin loader already initialized")
	MsgPluginUUIDNotFound      = pde("PD011202", "Plugin runtime instance of type %s with UUID %s does not exist")
	MsgPluginBadRequestBody    = pde("PD011203", "Invalid request body %T")
	MsgPluginUDSPathTooLong    = pde("PD011204", "Unix domain socket path too log (len=%d,limit=100)")
	MsgPluginBadResponseBody   = pde("PD011205", "%s %s returned invalid response body %T")
	MsgPluginError             = pde("PD011206", "%s %s returned error: %s")
	MsgPluginLoadFailed        = pde("PD011207", "Plugin load failed: %s")

	// BlockIndexer PD0113XX
	MsgBlockIndexerInvalidFromBlock         = pde("PD011300", "Invalid from block '%s' (must be 'latest' or number)")
	MsgBlockIndexerESSourceError            = pde("PD011302", "Event stream sources must not be changed after creation")
	MsgBlockIndexerESInitFail               = pde("PD011303", "Event stream initialization failed")
	MsgBlockIndexerESAlreadyInit            = pde("PD011304", "Event stream already initialized")
	MsgBlockIndexerConfirmedReceiptNotFound = pde("PD011305", "Receipt for confirmed transaction %s not found")
	MsgBlockIndexerInvalidEventStreamType   = pde("PD011306", "Unsupported event stream type: %s")
	MsgBlockIndexerNoBlocksIndexed          = pde("PD011308", "No confirmed blocks have yet been indexed")
	MsgBlockIndexerTransactionReverted      = pde("PD011309", "Transaction reverted: %s")
	MsgBlockIndexerConfirmedBlockNotFound   = pde("PD011310", "Block %s (%d) not found on retrieval after detection and requested number of confirmations")
	MsgBlockIndexerLimitRequired            = pde("PD011311", "limit is required on all queries")

	// EthClient module PD0115XX
	MsgEthClientInvalidInput            = pde("PD011500", "Unable to convert to ABI function input (func=%s)")
	MsgEthClientMissingFrom             = pde("PD011501", "Signer (from) missing")
	MsgEthClientMissingTo               = pde("PD011502", "To missing")
	MsgEthClientMissingInput            = pde("PD011503", "Input missing")
	MsgEthClientMissingOutput           = pde("PD011504", "Output missing")
	MsgEthClientInvalidTXVersion        = pde("PD011505", "Invalid TX Version (%s)")
	MsgEthClientABIJson                 = pde("PD011506", "JSON ABI parsing failed")
	MsgEthClientFunctionNotFound        = pde("PD011507", "Function %q not found on ABI")
	MsgEthClientChainIDFailed           = pde("PD011508", "Failed to query chain ID")
	MsgEthClientKeyMismatch             = pde("PD011509", "Resolved %q to different key handle expected=%q received=%q")
	MsgEthClientToWithConstructor       = pde("PD011510", "To address cannot be specified for constructor")
	MsgEthClientHTTPURLMissing          = pde("PD011511", "HTTP URL missing in configuration")
	MsgEthClientChainIDMismatch         = pde("PD011512", "ChainID mismatch between HTTP and WebSocket JSON/RPC connections http=%d ws=%d")
	MsgEthClientCallReverted            = pde("PD011513", "Reverted: %s")
	MsgEthClientReceiptNotAvailable     = pde("PD011514", "Receipt not available for transaction '%s'")
	MsgEthClientReturnValueNotDecoded   = pde("PD011515", "Error return value for custom error: %s")
	MsgEthClientReturnValueNotAvailable = pde("PD011516", "Error return value unavailable")
	MsgEthClientNoConnection            = pde("PD011517", "No JSON/RPC connection is available to this client")

	// DomainManager module PD0116XX
	MsgDomainNotFound                         = pde("PD011600", "Domain %q not found")
	MsgDomainNotInitialized                   = pde("PD011601", "Domain not initialized")
	MsgDomainInvalidSchema                    = pde("PD011602", "Domain schema %d is invalid")
	MsgDomainFactoryAbiJsonInvalid            = pde("PD011605", "Factory contract ABI invalid")
	MsgDomainRegistryAddressInvalid           = pde("PD011606", "Registry address '%s' invalid for domain '%s'")
	MsgDomainPrivateAbiJsonInvalid            = pde("PD011607", "Private contract ABI invalid")
	MsgDomainInvalidQueryJSON                 = pde("PD011608", "Invalid query JSON")
	MsgDomainContractNotFoundByAddr           = pde("PD011609", "A smart contract with address %s has not yet been indexed")
	MsgDomainContractNotValid                 = pde("PD011610", "A smart contract with address %s exists with invalid configuration rejected by the domain")
	MsgDomainInvalidPrepareDeployResult       = pde("PD011611", "Prepare deploy did not result in exactly one of a invoke transaction or a deploy transaction")
	MsgDomainInvalidFunctionParams            = pde("PD011612", "Invalid function parameters for %s")
	MsgDomainUnknownSchema                    = pde("PD011613", "Unknown schema %s")
	MsgDomainInvalidStateIDFromDomain         = pde("PD011614", "Domain returned invalid id '%s' for state %d")
	MsgDomainInputStateNotFound               = pde("PD011615", "Input state %d [%s] not found")
	MsgDomainMissingStates                    = pde("PD011616", "Missing in-memory states")
	MsgDomainEndorsementReverted              = pde("PD011617", "Endorsement from '%s' reverted: %s")
	MsgDomainBaseLedgerSubmitInvalid          = pde("PD011619", "Base ledger submission config is invalid")
	MsgDomainTXIncompleteInitDeploy           = pde("PD011620", "Transaction is incomplete for phase InitDeploy")
	MsgDomainTXIncompletePrepareDeploy        = pde("PD011621", "Transaction is incomplete for phase PrepareDeploy")
	MsgDomainMultipleEndorsersSubmit          = pde("PD011623", "Multiple endorsers of the transaction specified a submission constraint")
	MsgDomainNoEndorserSubmit                 = pde("PD011624", "Domain is configured for endorser submission, and no endorser specified a submission constraint")
	MsgDomainInvalidSubmissionConfig          = pde("PD011625", "Domain specified an unexpected base ledger submission config: %s")
	MsgDomainTxnInputDefinitionInvalid        = pde("PD011626", "Transaction input definition is invalid")
	MsgDomainTXIncompleteAssembleTransaction  = pde("PD011627", "Transaction is incomplete for phase AssembleTransaction")
	MsgDomainTXIncompleteWritePotentialStates = pde("PD011628", "Transaction is incomplete for phase WritePotentialStates")
	MsgDomainTXIncompleteLockStates           = pde("PD011629", "Transaction is incomplete for phase LockStates")
	MsgDomainReqIncompleteEndorseTransaction  = pde("PD011630", "Request is incomplete for phase EndorseTransaction")
	MsgDomainTXIncompleteResolveDispatch      = pde("PD011631", "Transaction is incomplete for phase ResolveDispatch")
	MsgDomainTXIncompletePrepareTransaction   = pde("PD011632", "Transaction is incomplete for phase PrepareTransaction")
	MsgDomainABIEncodingRequestEntryInvalid   = pde("PD011633", "ABI encoding request could not be completed as ABI entry is invalid")
	MsgDomainABIEncodingRequestEncodingFail   = pde("PD011634", "ABI encoding request failed")
	MsgDomainABIEncodingRequestInvalidType    = pde("PD011635", "ABI encoding request is of invalid type '%s'")
	MsgDomainABIEncodingRequestInvalidTX      = pde("PD011636", "Transaction encoding request is invalid")
	MsgDomainABIRecoverRequestAlgorithm       = pde("PD011637", "Algorithm not supported for recover signer '%s'")
	MsgDomainABIRecoverRequestSignature       = pde("PD011638", "Invalid signature")
	MsgDomainABIEncodingTypedDataInvalid      = pde("PD011639", "EIP-712 typed data V4 encoding request invalid")
	MsgDomainABIEncodingTypedDataFail         = pde("PD011640", "EIP-712 typed data V4 encoding request failed")
	MsgDomainInvalidSchemaID                  = pde("PD011641", "Invalid schema ID '%s'")
	MsgDomainInvalidEvents                    = pde("PD011642", "Events ABI is invalid")
	MsgDomainSigningDisabled                  = pde("PD011643", "Domain signing it not enabled for domain '%s'")
	MsgDomainSigningAlgorithmNotSupported     = pde("PD011644", "Domain '%s' has not registered algorithm '%s'")
	MsgDomainABIDecodingRequestEntryInvalid   = pde("PD011645", "ABI decoding request could not be completed as ABI entry is invalid")
	MsgDomainABIDecodingRequestFail           = pde("PD011646", "ABI decoding request failed")
	MsgDomainABIDecodingRequestInvalidType    = pde("PD011647", "ABI decoding request is of invalid type '%s'")
	MsgDomainTransactionWasNotADeployment     = pde("PD011648", "Transaction %s did not result in a deployment")
	MsgDomainRequestNotInFlight               = pde("PD011649", "State query context '%s' not in-flight")
	MsgDomainInvalidStateID                   = pde("PD011650", "Invalid state ID '%s'")
	MsgDomainInvalidStates                    = pde("PD011651", "Invalid states")
	MsgDomainInvalidResponseToValidate        = pde("PD011652", "Invalid response to validation")
	MsgDomainInvalidDataFromDomain            = pde("PD011653", "Invalid data returned by domain for call ABI outputs")
	MsgDomainNotConfiguredForPSC              = pde("PD011654", "A smart contract with address %s exists for a domain that is no longer configured on this node")
	MsgDomainEndorserSubmitConfigClash        = pde("PD011655", "An ENDORSER_MUST_SUBMIT constraint was provided by endorser %s, but the contract configuration is %s / %s")
	MsgDomainABIEncodingInlineSigningFailed   = pde("PD011656", "ABI encoding and signing failed with transaction type '%s' and key identifier '%s'")
	MsgDomainDomainReceiptNotAvailable        = pde("PD011657", "A domain receipt is not yet available for transaction %s as no state confirmations have been indexed for that transaction")
	MsgDomainDomainReceiptNoStatesAvailable   = pde("PD011658", "A domain receipt is not yet available for transaction %s as none of the private state data is available on the local node")
	MsgDomainSingingKeyMustBeLocalEthSign     = pde("PD011659", "Signing key must be local for ethereum transaction signing")
	MsgDomainNullifierForPartyOutsideDistro   = pde("PD011660", "A nullifier was requested for a party that is not in the distribution list")
	MsgDomainInvalidFromAddress               = pde("PD011661", "Invalid from identity in transaction")
	MsgDomainInvalidCoordinatorSelection      = pde("PD011662", "Invalid coordinator selection of '%s' configured. valid options are: COORDINATOR_SENDER, COORDINATOR_STATIC, COORDINATOR_ENDORSER")
	MsgDomainWriteActionNotPossibleInContext  = pde("PD011663", "Requested write action is not possible in this domain context")
	MsgDomainInvalidPGroupGenesisABI          = pde("PD011664", "Domain generated an invalid privacy group genesis ABI parameter schema")
	MsgDomainInvalidPGroupTxTypeNotPrivate    = pde("PD011665", "Resulting wrapped function call for privacy group must be a private transaction (type=%s)")
	MsgDomainInvalidPGroupTxCannotRedirect    = pde("PD011666", "Resulting wrapped function call must target the same smart contract (contract=%s,addr=%s)")

	// Entrypoint PD0117XX
	MsgEntrypointUnknownRunMode = pde("PD011700", "Unknown run mode '%s'")

	// PrivTxMgr PD0118XX
	MsgDomainNotProvided                         = pde("PD011800", "Domain not found in the transaction input")
	MsgPrivateTxManagerInternalError             = pde("PD011801", "Unexpected error in engine %s")
	MsgPrivateTxManagerAssembleError             = pde("PD011802", "Error assembling transaction: %s")
	MsgPrivateTxManagerParseFailed               = pde("PD011803", "Failed to parse message")
	MsgPrivateTxManagerInvalidMessage            = pde("PD011804", "Invalid message received from transport")
	MsgSequencerInternalError                    = pde("PD011805", "Sequencer internal error")
	MsgKeyResolutionFailed                       = pde("PD011806", "Key resolution failed for key %s, algorithm %s, verifierType %s")
	MsgDeployInitFailed                          = pde("PD011807", "Failed to initialise a deploy transaction")
	MsgDeployPrepareFailed                       = pde("PD011808", "Failed to prepare a deploy transaction")
	MsgDeployPrepareIncomplete                   = pde("PD011809", "Prepare step did not return a transaction to invoke, or a transaction to deploy")
	MsgBaseLedgerTransactionFailed               = pde("PD011810", "Failed to submit base ledger transaction")
	MsgContractAddressNotProvided                = pde("PD011811", "Contract address (To) not found in the transaction input")
	MsgPrivTxMgrPublicTxFail                     = pde("PD011812", "Public transaction rejected")
	MsgResolveVerifierRemoteFailed               = pde("PD011813", "Failed to resolve verifier on remote node with lookup %s algorithm %s: Error %s")
	MsgPrivateTxManagerAssembleRevert            = pde("PD011814", "Domain reverted transaction on assemble: %s")
	MsgPrivateTxManagerResolveError              = pde("PD011815", "Failed to resolve local signer for party %s (verifier=%s,algorithm=%s): %s")
	MsgPrivateTxManagerSignError                 = pde("PD011816", "Failed to sign for party %s (verifier=%s,algorithm=%s): %s")
	MsgPrivateTxManagerEndorsementRequestError   = pde("PD011817", "Failed to request endorsement from %s: %s")
	MsgPrivateTxManagerResolveDispatchError      = pde("PD011818", "Failed to resolve dispatcher: %s")
	MsgPrivateTxManagerPrepareError              = pde("PD011819", "Failed to prepare transaction dispatch to base ledger: %s")
	MsgPrivateTxManagerDeployError               = pde("PD011820", "Failed to deploy private contract")
	MsgPrivateTxMgrEncodeCallDataFailed          = pde("PD011821", "Failed to encode call data '%s' for private contract deploy")
	MsgPrivateTxManagerNonLocalSigningAddr       = pde("PD011822", "Attempt do dispatch a blockchain transaction using a signing identity for a different node: %s")
	MsgPrivateTxManagerStateHashContention       = pde("PD011823", "Contention detected attempting to spend hash %s in multiple transactions")
	MsgPrivateReDelegationRequired               = pde("PD011824", "Re-delegation is required for this transaction to progress")
	MsgPrivateTxMgrDomainMismatch                = pde("PD011825", "Domain '%s' specified does not match domain '%s' of deployed private smart contract %s")
	MsgPrivateTxMgrInvalidPrepareOutcome         = pde("PD011826", "Prepare outcome unexpected for transaction %s intent=%s public-submission=%t private-submission=%t")
	MsgPrivateTxMgrPrepareNotSupportedDeploy     = pde("PD011827", "Preparing transactions for external submission is not supported for deploy")
	MsgPrivateTxManagerInvalidEventMissingField  = pde("PD011828", "Invalid event: missing field %s")
	MsgPrivateTxManagerSignRemoteError           = pde("PD011829", "Attempt to sign a transaction with an identity from a remote node: %s")
	MsgPrivateTxMgrFromNotResolvedDistroTime     = pde("PD011830", "Failed to extract node from fully qualified from address for state distribution")
	MsgPrivateTxMgrInvalidTxStateStateDistro     = pde("PD011831", "Invalid transaction state for state distribution")
	MsgPrivateTxMgrDistributionNotFullyQualified = pde("PD011832", "State distribution from domain is not fully qualified: %s")
	MsgPrivateTxMgrInvalidNullifierSpecInDistro  = pde("PD011833", "Invalid nullifier specification in new state instruction from domain")
	MsgPrivateTxManagerNewSequencerError         = pde("PD011834", "Failed to create new sequencer")
	MsgPrivateTxManagerInvalidStaticCoordinator  = pde("PD011835", "Contract was configured with invalid static coordinator '%s'.  Must be of the form 'identity@node'")
	MsgPrivateTxMgrFunctionNotProvided           = pde("PD011836", "Function abi not provided in transaction input")
	MsgPrivateTxMgrAssembleRequestInvalid        = pde("PD011837", "Assemble request is invalid for transaction %s")
	MsgPrivateTxMgrAssembleTxnNotFound           = pde("PD011838", "Transaction %s not found in local node")

	// Public Transaction Manager PD0119XX
	MsgInsufficientBalance             = pde("PD011900", "Balance %s of fueling source address %s is below the required amount %s")
	MsgBalanceBelowMinimum             = pde("PD011901", "Balance %s of fueling source address %s is below the configured minimum balance %s")
	MsgInvalidBigIntString             = pde("PD011902", "Value of '%s' is not a valid bigInt string")
	MsgMaxBelowMin                     = pde("PD011903", "Value of '%s' is not a valid max, it is below the min value")
	MsgMaxBelowMinThreshold            = pde("PD011904", "Value of '%s' is not a valid max, it is below the min threshold")
	MsgSubmitFailedWrongHashReturned   = pde("PD011905", "Submission of transaction with calculatedHash '%s' returned hash '%s'")
	MsgSubmissionResponseMissingTxHash = pde("PD011906", "Missing transaction hash from the submission response for transaction with ID: %s")
	MsgPublicTxMgrAlreadyInit          = pde("PD011907", "Public transaction manager already initialized")
	MsgInvalidGasClientConfig          = pde("PD011908", "Invalid gas client config: %s")
	MsgInvalidGasPriceIncreaseMax      = pde("PD011909", "Invalid max gas price increase price string %s")
	MsgMissingTransactionID            = pde("PD011910", "Transaction ID must be provided")
	MsgPublicTransactionNotFound       = pde("PD011911", "Public transaction not found with id %s")
	MsgGasPriceError                   = pde("PD011917", `The gasPrice '%s' could not be parsed. Must be a numeric string, or an object with 'gasPrice' field, or 'maxFeePerGas'/'maxPriorityFeePerGas' fields (EIP-1559), error: %s`)
	MsgPersistError                    = pde("PD011918", "Unexpected internal error, cannot persist stage.")
	MsgInvalidStageOutput              = pde("PD011919", "Stage output object is missing %s: %+v")
	MsgInvalidGasLimit                 = pde("PD011920", "Invalid gas limit, must be a positive number")
	MsgStatusUpdateForbidden           = pde("PD011921", "Cannot update status of a completed transaction")
	MsgTransactionNotFound             = pde("PD011924", "Transaction '%s' not found")
	MsgTransactionEngineRequestTimeout = pde("PD011926", "The transaction handler did not acknowledge the request after %.2fs")
	MsgErrorMissingSignerID            = pde("PD011928", "Signer Identifier must be provided")
	MsgInvalidTransactionType          = pde("PD011929", "Transaction type invalid")
	MsgMissingConfirmedTransaction     = pde("PD011930", "Transaction %s with nonce smaller than the recorded confirmed nonce does not have an indexed transaction.")
	MsgPublicTxHistoryInfo             = pde("PD011931", "PubTx[INFO] from=%s nonce=%s subStatus=%s action=%s info=%s")
	MsgPublicTxHistoryError            = pde("PD011932", "PubTx[ERROR] from=%s nonce=%s subStatus=%s action=%s error=%s")
	MsgPublicBatchCompleted            = pde("PD011933", "Batch already completed")
	MsgInvalidAutoFuelSource           = pde("PD011934", "Invalid auto-fueling source '%s'")
	MsgInvalidStateMissingTXHash       = pde("PD011935", "Invalid state - missing transaction hash from previous sign stage")
	MsgInvalidTXMissingFromAddr        = pde("PD011936", "From address missing for transaction")
	MsgTransactionAlreadyComplete      = pde("PD011937", "Transaction cannot be updated as it is already complete")
	MsgUpdateGasPriceLower             = pde("PD011938", "Gas price cannot be lowered for transaction (current=%s requested=%s)")
	MsgUpdateMaxFeePerGasLower         = pde("PD011939", "Max fee per gas cannot be lowered for transaction (current=%s requested=%s)")
	MsgUpdateNoFixedPricing            = pde("PD011940", "Cannot unset gas price for transaction with fixed gas pricing")

	// TransportManager module PD0120XX
	MsgTransportInvalidMessage                 = pde("PD012000", "Invalid message")
	MsgTransportNotFound                       = pde("PD012001", "Transport %q not found")
	MsgTransportNodeNameNotConfigured          = pde("PD012002", "nodeName must be configured to set the identity of the local node")
	MsgTransportNoTransportsConfiguredForNode  = pde("PD012003", "None of the transports registered by node '%s' are configured locally on this node: %v")
	MsgTransportDetailsNotAvailable            = pde("PD012004", "Transport '%s' not available for node '%s'")
	MsgTransportInvalidReplyToReceived         = pde("PD012006", "Message received with invalid replyTo destination: '%s'")
	MsgTransportSendLocalNode                  = pde("PD012007", "Attempt to send message to local node '%s'")
	MsgTransportInvalidReplyToSend             = pde("PD012008", "Message has invalid replyTo destination: '%s'")
	MsgTransportInvalidLocalNode               = pde("PD012009", "Node '%s' is the local node")
	MsgTransportClientAlreadyRegistered        = pde("PD012010", "Client '%s' already registered")
	MsgTransportComponentNotFound              = pde("PD012011", "Component '%s' not found")
	MsgTransportClientRegisterAfterStartup     = pde("PD012012", "Client '%s' attempted registration after startup")
	MsgTransportUnsupportedReliableMsg         = pde("PD012013", "Unsupported reliable message type '%s'")
	MsgTransportStateNotAvailableLocally       = pde("PD012014", "State not available locally: domain=%s,contract=%s,id=%s")
	MsgTransportInvalidTargetNode              = pde("PD012015", "Invalid target node '%s'")
	MsgTransportInvalidMessageData             = pde("PD012016", "Invalid data for message %s")
	MsgTransportUnsupportedReliableMsgType     = pde("PD012017", "Unsupported reliable message type '%s'")
	MsgTransportAckMissingCorrelationID        = pde("PD012018", "Ack/nack missing correlation ID")
	MsgTransportNackMissingError               = pde("PD012019", "Nack missing error information")
	MsgTransportStateSchemaNotAvailableLocally = pde("PD012020", "State schema not available locally: domain=%s,id=%s")
	MsgTransportMessageNotAvailableLocally     = pde("PD012021", "Message not available locally: id=%s")
	MsgTransportPrivacyGroupStateStorageFailed = pde("PD012022", "Storage of privacy group state failed: id=%s")

	// RegistryManager module PD0121XX
	MsgRegistryNodeEntiresNotFound     = pde("PD012100", "No entries found for node '%s'")
	MsgRegistryNotFound                = pde("PD012101", "Registry %q not found")
	MsgRegistryInvalidEventSource      = pde("PD012102", "Events source %d is invalid")
	MsgRegistryInvalidEntryID          = pde("PD012103", "Invalid entry ID '%s'")
	MsgRegistryInvalidEntryName        = pde("PD012104", "Invalid entry name '%s'")
	MsgRegistryInvalidPropertyName     = pde("PD012105", "Invalid property name '%s'")
	MsgRegistryInvalidParentID         = pde("PD012106", "Invalid parent ID '%s'")
	MsgRegistryQueryLimitRequired      = pde("PD012107", "Limit is required on all queries")
	MsgRegistryTransportPropertyRegexp = pde("PD012108", "transports.propertyRegexp for registry '%s' is invalid")
	MsgRegistryDollarPrefixReserved    = pde("PD012109", "Name '%s' is invalid. Dollar ('$') prefix is allowed only for reserved properties, and then is required (pluginReserved=%t)")

	// TxMgr module PD0122XX
	MsgTxMgrInvalidABI                   = pde("PD012201", "ABI is invalid")
	MsgTxMgrABIAndDefinition             = pde("PD012202", "Must supply one of an abi or an abiReference")
	MsgTxMgrABIReferenceLookupFailed     = pde("PD012203", "Failed to resolve abiReference %s")
	MsgTxMgrFunctionWithoutTo            = pde("PD012204", "A to contract address must be specified with a function name (leave blank to select constructor)")
	MsgTxMgrFunctionMultiMatch           = pde("PD012205", "Supplied function selector matched more than one function in the ABI: '%s' and '%s'")
	MsgTxMgrFunctionNoMatch              = pde("PD012206", "Supplied function selector did not match any function in the ABI")
	MsgTxMgrBytecodeNonPublicConstructor = pde("PD012207", "Bytecode can only be supplied with a public constructor. Selected %s function %s")
	MsgTxMgrInvalidInputData             = pde("PD012208", "Invalid input data for function %s")
	MsgTxMgrBytecodeAndHexData           = pde("PD012210", "When deploying a smart contract the bytecode must be supplied separately to the input data")
	MsgTxMgrInvalidTXType                = pde("PD012211", "Invalid transaction type")
	MsgTxMgrInvalidInputDataType         = pde("PD012212", "Invalid input data type: %T")
	MsgTxMgrInvalidReceiptNotification   = pde("PD012213", "Invalid receipt notification from component: %s")
	MsgTxMgrRevertedNoData               = pde("PD012214", "Unable to decode revert data (no revert data available)")
	MsgTxMgrRevertedDecodedData          = pde("PD012216", "Transaction reverted %s")
	MsgTxMgrInvalidStoredData            = pde("PD012217", "Stored data is invalid")
	MsgTxMgrNoABIOrReference             = pde("PD012218", "An ABI containing a function/constructor definition or an abiReference to an existing stored ABI must be supplied")
	MsgTxMgrIdempotencyKeyClash          = pde("PD012220", "idempotencyKey already used by submitted transaction %s") // important error code (relied on by operator, and apps)
	MsgTxMgrRevertedNoMatchingErrABI     = pde("PD012221", "No error ABI available to decode %s")
	MsgTxMgrPrivateCallRequiresTo        = pde("PD012222", "A to contract address must be specified for private smart contract calls")
	MsgTxMgrPrivateChainedTXIdemKey      = pde("PD012223", "Chained internal transactions must have an idempotency key")
	MsgTxMgrPrivateInsertErrorMismatch   = pde("PD012224", "An unexpected result occurred inserting private transactions after-insert=%d matched=%d expected=%d")
	MsgTxMgrPrivateOnlyForPrepare        = pde("PD012225", "Prepare transaction only supports private transactions")
	MsgTxMgrDecodeCallNoData             = pde("PD012226", "Unable to decode call data (less than 4 bytes)")
	MsgTxMgrDecodeCallDataNoABI          = pde("PD012227", "Unable to decode call data using stored ABIs (%d matched function selector)")
	MsgTxMgrDecodeEventAnonymous         = pde("PD012228", "Unable to decode event with no topics (anonymous events cannot be decoded)")
	MsgTxMgrDecodeEventNoABI             = pde("PD012229", "Unable to decode event data using stored ABIs (%d matched signature)")
	MsgTxMgrPublicSenderNotValidLocal    = pde("PD012230", "The from identity '%s' must be a valid identity local to the node")
	MsgTxMgrDomainMismatch               = pde("PD012231", "The domain '%s' specified on the transaction does not match the domain '%s' for contract %s")
	MsgTxMgrDomainMissingForDeploy       = pde("PD012232", "A domain must be specified for a private smart contract deployment transaction")
	MsgTxMgrBadReceiptListenerFilter     = pde("PD012233", "Transaction receipt listener '%s' filters are invalid")
	MsgTxMgrBadReceiptListenerOptions    = pde("PD012234", "Transaction receipt listener '%s' options are invalid")
	MsgTxMgrReceiptListenerDupLoad       = pde("PD012235", "Transaction receipt listener '%s' already loaded")
	MsgTxMgrBadReceiptListenerTypeDomain = pde("PD012236", "Transaction receipt listener '%s' has invalid filter combination type='%s' domain='%s'")
	MsgTxMgrDuplicateReceiptListenerName = pde("PD012237", "A receipt listener named '%s' already exists")
	MsgTxMgrReceiptListenerNotLoaded     = pde("PD012238", "Receipt listener '%s' does not exist")
	MsgTxMgrLifecycleMethodUnknown       = pde("PD012239", "JSON/RPC method '%s' unexpectedly routed to event listener lifecycle")
	MsgTxMgrSubIDRequired                = pde("PD012240", "Subscription ID is required")
	MsgTxMgrListenerNameRequired         = pde("PD012241", "Receipt listener name is required")
	MsgTxMgrJSONRPCSubscriptionClosed    = pde("PD012242", "JSON/RPC subscription '%s' closed")
	MsgTxMgrJSONRPCSubscriptionNack      = pde("PD012243", "JSON/RPC subscription '%s' returned nack for receipt batch")
	MsgTxMgrTransactionNotFound          = pde("PD012244", "Transaction not found with id %s")
	MsgTxMgrUpdateInvalidType            = pde("PD012245", "Private transaction cannot be updated")

	// FlushWriter module PD0123XX
	MsgFlushWriterQuiescing      = pde("PD012300", "Writer shutting down")
	MsgFlushWriterInvalidResults = pde("PD012301", "Error in handler produced invalid write results")
	MsgFlushWriterOpInvalid      = pde("PD012302", "Write operation missing key")

	// State distributor PD0124XX
	MsgStateDistributorNullifierNotLocal = pde("PD012400", "Request to generate a nullifier with an identity that is not fully qualified for the local node")
	MsgStateDistributorNullifierFail     = pde("PD012401", "Failed to generate nullifier for state %s")

	// Privacy group manager PD0125XX
	MsgPGroupsNoMembers                     = pde("PD012501", "The privacy group must have at least one member")
	MsgPGroupsGroupNotFound                 = pde("PD012502", "Privacy group '%s' not found")
	MsgPGroupsNotReady                      = pde("PD012503", "Privacy group '%s' is not ready (check transaction '%s' has been confirmed on-chain)")
	MsgPGroupsNoGroupID                     = pde("PD012504", "groupId must be specified")
	MsgPGroupsNoDomain                      = pde("PD012505", "domain must be specified")
	MsgPGroupsTXMustBePrivate               = pde("PD012506", "type must be 'private' for invocations and calls via privacy groups")
	MsgPGroupsDuplicateMessageListenerName  = pde("PD012507", "A message listener named '%s' already exists")
	MsgPGroupsMessageListenerNotLoaded      = pde("PD012508", "Message listener '%s' does not exist")
	MsgPGroupsMessageListenerBadTopicFilter = pde("PD012509", "Invalid topic filter regular expression '%s'")
	MsgPGroupsBadMessageListenerFilter      = pde("PD012510", "Message listener '%s' filters are invalid")
	MsgPGroupsBadMessageListenerOptions     = pde("PD012511", "Message listener '%s' options are invalid")
	MsgPGroupsMessageListenerDupLoad        = pde("PD012512", "Message listener '%s' already loaded")
	MsgPGroupsMessageNotFound               = pde("PD012513", "Message not found")
	MsgPGroupsMessageDataNil                = pde("PD012514", "Message data cannot be null")
	MsgPGroupsMessageTopicEmpty             = pde("PD012515", "Message topic cannot be empty")
	MsgPGroupsMessageInvalid                = pde("PD012516", "Message invalid")
	MsgPGroupsLifecycleMethodUnknown        = pde("PD012517", "JSON/RPC method '%s' unexpectedly routed to event listener lifecycle")
	MsgPGroupsSubIDRequired                 = pde("PD012518", "Subscription ID is required")
	MsgPGroupsListenerNameRequired          = pde("PD012519", "Receipt listener name is required")
	MsgPGroupsJSONRPCSubscriptionClosed     = pde("PD012520", "JSON/RPC subscription '%s' closed")
	MsgPGroupsJSONRPCSubscriptionNack       = pde("PD012521", "JSON/RPC subscription '%s' returned nack for message batch")
	MsgPGroupsGenesisSaltUnset              = pde("PD012522", "Genesis salt must be set")
	MsgPGroupsReceivedGenesisInvalid        = pde("PD012523", "Received genesis state is invalid")
)
